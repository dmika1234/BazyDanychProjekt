library(shiny); source('proba.r')
source('proba.r')
server <- function(input, output, session) {
login = FALSE
USER <- reactiveValues(login = login)
observe({
if (USER$login == FALSE) {
if (!is.null(input$login)) {
if (input$login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
if(length(which(credentials$username_id==Username))==1) {
#pasmatch  <- credentials["passod"][which(credentials$username_id==Username),]
#pasverify <- password_verify(pasmatch, Password)
pasverify <- credentials[username_id==Username, passod]==Password
if(pasverify) {
USER$login <- TRUE
} else {
shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade")
shinyjs::delay(3000, shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade"))
}
} else {
shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade")
shinyjs::delay(3000, shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade"))
}
}
}
}
})
observeEvent(input$reg_butt, {
if(input$reg_passwd)
tryCatch({
x1 <- dbSendQuery(con, paste0("SELECT utworz_konto('",
input$reg_email,"', '", input$reg_passwd, "','", input$reg_plan, "');"))
},
error = function(err){
showNotification(paste0("Podany email nie istnieje!"), type = 'err')
})
})
output$logoutbtn <- renderUI({
req(USER$login)
tags$li(a(icon("fa fa-sign-out"), "Logout",
href="javascript:window.location.reload(true)"),
class = "dropdown",
style = "background-color: #eee !important; border: 0;
font-weight: bold; margin:5px; padding: 10px;")
})
output$sidebarpanel <- renderUI({
if (USER$login == TRUE ){
sidebarMenu(
menuItem("Main Page", tabName = "dashboard", icon = icon("dashboard"))
)
}
})
output$body <- renderUI({
if (USER$login == TRUE ) {
tabItem(tabName ="dashboard", class = "active",
fluidRow(
box(width = 12, dataTableOutput('results'))
))
}
else {
loginpage
}
})
output$results <-  DT::renderDataTable({
datatable(iris, options = list(autoWidth = TRUE,
searching = FALSE))
})
}
con <- dbConnect(RPostgres::Postgres(), dbname = "projekt",
host = "localhost", port = 5432,
user = "postgres", pass = "dell123987")
us <- dbGetQuery(con, "SELECT haslo, email FROM konta;")
users <- us$email
passwords <- us$haslo
plans <- dbGetQuery(con, "SELECT nazwa_planu FROM plany;")
plans
# Main login screen
loginpage <- div(id = "loginpage", style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
#Logowanie==
wellPanel(
tags$h2("Zaloguj sie", class = "text-center", style = "padding-top: 0;color:#333; font-weight:600;"),
textInput("userName", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
br(),
div(
style = "text-align: center;",
actionButton("login", "Zaloguj sie", style = "color: white; background-color:#3c8dbc;
padding: 10px 15px; width: 150px; cursor: pointer;
font-size: 18px; font-weight: 600;"),
shinyjs::hidden(
div(id = "nomatch",
tags$p("Oops! Incorrect username or password!",
style = "color: red; font-weight: 600;
padding-top: 5px;font-size:16px;",
class = "text-center"))),
br(),
br(),
tags$code(paste("Username: ", users[1],  "Password: ", passwords[1])),
br()
)),
#Rejestracja==
wellPanel(
tags$h2("Zarejestruj sie", class = "text-center", style = "padding-top: 0;color:#333; font-weight:600;"),
textInput("reg_email", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("reg_passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
passwordInput("reg_passwd2", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Powtorz haslo")),
selectInput("reg_plan", "Wybierz plan z listy", choices = plans),
br(),
div(
style = "text-align: center;",
actionButton("reg_butt", "Zarejestruj sie", style = "color: white; background-color:#3c8dbc;
padding: 10px 15px; width: 150px; cursor: pointer;
font-size: 18px; font-weight: 600;")
))
credentials = data.table(
username_id = users,
passod   = passwords,
stringsAsFactors = F
)
header <- dashboardHeader( title = "Simple Dashboard", uiOutput("logoutbtn"))
sidebar <- dashboardSidebar(uiOutput("sidebarpanel"))
body <- dashboardBody(shinyjs::useShinyjs(), uiOutput("body"))
ui<-dashboardPage(header, sidebar, body, skin = "blue")
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
shinyWidgetsGallery()
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
dbClearResult(res)
res <- dbSendQuery(con, paste0("SELECT utworz_konto('",
input$reg_email,"', '", input$reg_passwd, "','", input$reg_plan, "');"))
source('proba.r')
source('proba.r')
source('proba.r')
plans <- dbGetQuery(con, "SELECT nazwa_planu FROM plany;")
plans
plans <- plans[1;5]
plans
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
plans_modal <- as.data.table(dbGetQuery(con, "SELECT * FROM plany;"))
plans_modal
plans_modal <- plans_modal[, Cena := paste(cena, "zl", sep = " ")]
plans_modal
plans_modal <- as.data.table(dbGetQuery(con, "SELECT * FROM plany;"))
plans_modal[, Cena := paste(cena, "zl", sep = " ")]
plans_modal
plans_modal <- as.data.table(dbGetQuery(con, "SELECT * FROM plany;"))
plans_modal[, cena := paste(cena, "zl", sep = " ")]
plans_modal
setnames(plans_modal,
old = c("nazwa_planu", "max_osob", "cena"),
new = C("Nazwa planu", "Maksymalna liczba uzytkownikow", "Cena"))
setnames(plans_modal,
old = c("nazwa_planu", "max_osob", "cena"),
new = c("Nazwa planu", "Maksymalna liczba uzytkownikow", "Cena"))
plans_modal
plans_modal <- plans_modal[, -1]
plans_modal
plans_modal <- plans_modal[, -1]
source('proba.r')
source('proba.r')
install.packages("shinyBS")
library(shinyBS)
source('proba.r')
source('proba.r')
plans_modal <- plans_modal[, -1]
plans_modal
plans_modal
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
source('proba.r')
current_mails <- dbGetQuery(con, "SELECT email FROM konta;")
source('proba.r')
source('proba.r')
res <- dbSendQuery(con, paste0("SELECT utworz_konto('asd@onet.pl', 'asd', 'Single')")
res
res <- dbSendQuery(con, paste0("SELECT utworz_konto('asd@onet.pl', 'asd', 'Single')")
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single')")
dbGetInfo(res)$has.completed
dbClearResult(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single')")
dbGetInfo(res)$has.completed
dbGetInfo(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
dbGetInfo(res)
res <- dbSendQuery(con, "SELECT * FROM konta;")
dbGetInfo(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
dbGetInfo(res)$has.completed
dbClearResult(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
dbClearResult(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
dbGetInfo(res)$has.completed
dbClearResult(res)
dbGetInfo(res)
dbGetInfo(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
dbGetInfo(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
dbGetInfo(res)$has.completed
dbGetInfo(res)$has.completed
res
dbClearResult(res)
res
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
res
dbClearResult(res)
res <- dbSendQuery(con, "SELECT utworz_konto('asd@onet.pl', 'asd', 'Single');")
res
dbGetInfo(res)$has.completed
dbHasCompleted(res)
dbClearResult(res)
dbClearResult(res)
res <- dbSendQuery(con, "INSERT INTO konta (email, haslo, data_zalozenia, id_planu) VALUES ('asd@onet.pl', 'asd', '2021-01-01', '5');")
res
dbHasCompleted(res)
dbClearResult(res);
dbHasCompleted(res)
dbClearResult(res)
res2 <- dbSendQuery(con, "SELECT skomentuj_film(NULL, 'cokolwiek', 8, 20);")
dbGetInfo(res2)$has.completed
function(input, output) {
a <- reactive(
c("proba1, proba2")
)
observeEvent(input$reg_butt, {
dbSendQuery(con, paste0("SELECT utworz_konto('",
input$mail,"', '", input$passwd2, "','", input$plan, "');"))
})
}
library(DT)
library(shinyjs)
library(sodium)
library(RPostgres)
library(data.table)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
runApp('D:/Studia/BazyDanych/Labki/Projekt/Aplikacja')
output$a <- reactive(
c("proba1, proba2")
)
function(input, output) {
a <- reactive({
c("proba1, proba2")
})
observeEvent(input$reg_butt, {
dbSendQuery(con, paste0("SELECT utworz_konto('",
input$mail,"', '", input$passwd2, "','", input$plan, "');"))
})
}
runApp('D:/Studia/BazyDanych/Labki/Projekt/Aplikacja')
getwd()
source("app_global.R")
runApp()
library(dashboardthemes)
runApp()
library(DT)
library(shinyjs)
library(sodium)
library(data.table)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(RPostgres)
library(data.table)
library(dashboardthemes)
library(shinyBS)
runApp()
runApp()
source('proba (1).r')
source('proba (1).r')
source("app_global.R")
source("ui.R")
runApp()
runApp()
runApp()
runApp(list(ui = ui, server = server))
runApp(list(ui = ui, server = server))
source("ui.R")
source("server.R")
source('app_global.R')
source('app_global.R')
#Panel logowania==============================================================================================================================
loginpage <- tags$div(id = "loginpage", style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
fluidRow(
#LogowanieUI==
wellPanel(
tags$h2("Logowanie", class = "text-center", style = "padding-top: 0; font-weight:600;"),
textInput("userName", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
br(),
div(
style = "text-align: center;",
actionButton("login", "Zaloguj", style = "color: white; font-weight: 600;"),
shinyjs::hidden(
div(id = "nomatch",
tags$p("Ups! BĹ‚Ä™dny login lub hasĹ‚o!",
style = "color: red; font-weight: 600;
padding-top: 5px;font-size:16px;",
class = "text-center"))),
br(),
br(),
tags$code(paste("Username: ", users[1],  "Password: ", passwords[1])),
br()
)),
#=============
#RejestracjaUI==================================
wellPanel(
tags$h2(HTML('Nie masz konta? <br/> Zarejestruj sie'), class = "text-center", style = "padding-top: 0; font-weight:600;"),
textInput("reg_email", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("reg_passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
passwordInput("reg_passwd2", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Powtorz haslo")),
selectInput("reg_plan", "Wybierz plan z listy", choices = plans),
actionButton("about_plan", "Dowiedz sie wiecej o planach"),
bsModal("modalExample", "Data Table", "about_plan", size = "large",
dataTableOutput("tbl")),
br(),
div(
style = "text-align: center;",
actionButton("reg_butt", "Zarejestruj sie", style = "color: white; font-weight: 600;")
)
)
#=============
)
)
#Panel logowania==============================================================================================================================
loginpage <- tags$div(id = "loginpage", style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
fluidRow(
#LogowanieUI==
wellPanel(
tags$h2("Logowanie", class = "text-center", style = "padding-top: 0; font-weight:600;"),
textInput("userName", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
br(),
div(
style = "text-align: center;",
actionButton("login", "Zaloguj", style = "color: white; font-weight: 600;"),
shinyjs::hidden(
div(id = "nomatch",
tags$p("Ups! BĹ‚Ä™dny login lub hasĹ‚o!",
style = "color: red; font-weight: 600;
padding-top: 5px;font-size:16px;",
class = "text-center"))),
br(),
br(),
tags$code(paste("Username: ", users[1],  "Password: ", passwords[1])),
br()
)),
#=============
#RejestracjaUI==================================
wellPanel(
tags$h2(HTML('Nie masz konta? <br/> Zarejestruj sie'), class = "text-center", style = "padding-top: 0; font-weight:600;"),
textInput("reg_email", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("reg_passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
passwordInput("reg_passwd2", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Powtorz haslo")),
selectInput("reg_plan", "Wybierz plan z listy", choices = plans),
actionButton("about_plan", "Dowiedz sie wiecej o planach"),
bsModal("modalExample", "Data Table", "about_plan", size = "large",
dataTableOutput("tbl")),
br(),
div(
style = "text-align: center;",
actionButton("reg_butt", "Zarejestruj sie", style = "color: white; font-weight: 600;")
)
)
#=============
)
)
con <- dbConnect(RPostgres::Postgres(), dbname = "projekt",
host = "localhost", port = 5432,
user = "postgres", pass = "dell123987")
us <- dbGetQuery(con, "SELECT id_konta, haslo, email FROM konta;")
users <- us$email
passwords <- us$haslo
plans_modal <- as.data.table(dbGetQuery(con, "SELECT * FROM plany;"))
plans_modal[, cena := paste(cena, "zl", sep = " ")]
setnames(plans_modal,
old = c("nazwa_planu", "max_osob", "cena"),
new = c("Nazwa planu", "Maksymalna liczba uzytkownikow", "Cena"))
plans_modal <- plans_modal[, -1]
plans <- dbGetQuery(con, "SELECT nazwa_planu FROM plany;")
top_f <- dbGetQuery(con, "SELECT * FROM top_filmow;")
top_s <- dbGetQuery(con, "SELECT * FROM top_seriali;")
#============================================================
credentials = data.table(
username_id = users,
passod   = passwords,
stringsAsFactors = F)
#=============================================================
#Panel logowania==============================================================================================================================
loginpage <- tags$div(id = "loginpage", style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
fluidRow(
#LogowanieUI==
wellPanel(
tags$h2("Logowanie", class = "text-center", style = "padding-top: 0; font-weight:600;"),
textInput("userName", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
br(),
div(
style = "text-align: center;",
actionButton("login", "Zaloguj", style = "color: white; font-weight: 600;"),
shinyjs::hidden(
div(id = "nomatch",
tags$p("Ups! BĹ‚Ä™dny login lub hasĹ‚o!",
style = "color: red; font-weight: 600;
padding-top: 5px;font-size:16px;",
class = "text-center"))),
br(),
br(),
tags$code(paste("Username: ", users[1],  "Password: ", passwords[1])),
br()
)),
#=============
#RejestracjaUI==================================
wellPanel(
tags$h2(HTML('Nie masz konta? <br/> Zarejestruj sie'), class = "text-center", style = "padding-top: 0; font-weight:600;"),
textInput("reg_email", placeholder="E-mail", label = tagList(icon("user"), "E-mail")),
passwordInput("reg_passwd", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Haslo")),
passwordInput("reg_passwd2", placeholder="Haslo", label = tagList(icon("unlock-alt"), "Powtorz haslo")),
selectInput("reg_plan", "Wybierz plan z listy", choices = plans),
actionButton("about_plan", "Dowiedz sie wiecej o planach"),
bsModal("modalExample", "Data Table", "about_plan", size = "large",
dataTableOutput("tbl")),
br(),
div(
style = "text-align: center;",
actionButton("reg_butt", "Zarejestruj sie", style = "color: white; font-weight: 600;")
)
)
#=============
)
)
#=============================================================================================================================================
runApp()
runApp()
runApp()
runApp()
library(DT)
library(shinyjs)
library(sodium)
library(data.table)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
require("RPostgres")
require(data.table)
library("dashboardthemes")
library("shinyBS")
runApp()
